from __main__ import *

import json

from ghidra.program.model.listing import (CodeUnit, Instruction)
from ghidra.program.model.scalar import Scalar


def add_bookmark_comment(addr, comment):
    cu = currentProgram.getListing().getCodeUnitAt(addr)
    createBookmark(addr, "hashed_name", comment)
    cu.setComment(CodeUnit.EOL_COMMENT, comment)

class HashDB:
    def __init__(self, db_path):
        self.db = self._load(db_path)

    def _load(self, db_path):
        with open(db_path) as f:
            return json.loads(f.read())

    def lookup(self, value):
        found = self.db.get(value)
        if not found:
            raise ValueError('{} is not found in DB'.format(value))
        return found  

def get_scalar_argument(inst):
    # get mnemonic in one instruction
    mnemonic = inst.getMnemonicString()

    if mnemonic == 'PUSH':
        # get operand in index 1
        value = inst.getOpObjects(0)[0]
        if isinstance(value, Scalar) and value.bitLength() == 32:
            return value
    elif mnemonic == 'MOV':
        value = inst.getOpObjects(1)[0]
        if isinstance(value, Scalar) and value.bitLength() == 32:
            return value



def main():
    db_path = askFile("DB for hashes", "import").getPath()

    # for Headless usage, you can get arugment via command line 
    # db_path = getScriptArgs()[0]
    
    db = HashDB(db_path)

    # get all instructions in program
    instructions = currentProgram.getListing().getInstructions(True)

    # process each instruction
    for inst in instructions:
        value = get_scalar_argument(inst)
        if value is not None:
            try:
                # then lookup DB
                orig_name = db.lookup(str(value))

                # if it exists, add comment and add bookmark
                if orig_name:
                    print('[*] {} at {} : {}'.format(str(value), inst.getAddress(), orig_name))
                    add_bookmark_comment(inst.getAddress(), orig_name)
            except Exception as e:
                pass

if __name__ == '__main__':
    main()
