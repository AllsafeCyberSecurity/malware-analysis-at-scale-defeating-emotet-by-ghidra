from __main__ import *
from ghidra.app.emulator import EmulatorHelper

def init_emulator():
    # initialize emulator
    emu = EmulatorHelper(currentProgram)

    # initialize stack
    registry_size = emu.getStackPointerRegister().getBitLength()
    stack_address = toAddr((((1 << (registry_size - 1)) - 1) ^ ((1 << (registry_size//2))-1)))
    emu.writeRegister(emu.getStackPointerRegister(), stack_address.getOffset())

    return emu


def emulate_calc_hash(entry_addr, param):
    emu = init_emulator()

    end_address = entry_addr.add(10)
    emu.setBreakpoint(end_address)

    # write parameter string into ECX
    string_address = toAddr(0xa00000)
    emu.writeMemory(string_address, param)
    emu.writeRegister('ECX', string_address.getOffset())

    # set address of entrypoint to execute at EIP
    emu.writeRegister(emu.getPCRegister(), entry_addr.getOffset())

    # run through until breakpoint
    while monitor.isCancelled() is False:
        current_address = emu.getExecutionAddress()
        if current_address == end_address:
            break
        emu.step(monitor)
    
    # get hashed value in EAX
    result = emu.readRegister('EAX')
    return result

