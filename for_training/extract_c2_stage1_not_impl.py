from __main__ import *
import socket
import struct

SIZE_OF_IP = 4
SIZE_OF_SINGLE_CONFIG = 8

def convert_dword_to_ip(dword_ip):
    return socket.inet_ntoa(struct.pack('!I', dword_ip)).encode('utf-8')

class InvalidConfig(Exception):
    pass

def parse_single_config(addr):
    ''' **** IMPLEMENT HERE ****

    parse one C2Info structure and return IP and port as tuple.
    when it comes to the end of config, function will raise 
    InvalidConfig error.

    Hint:
        1. use `getInt` to get 4 bytes in little endian format
        2. use `convert_dword_to_ip` to convert DWORD to IP string    
        3. use `getShort` to get 2 bytes in little endian format 
    '''
    raise NotImplementedError('not implemented')

def iterate_config(config_addr):
    while True:
        try:
            ip, port = parse_single_config(config_addr)
            config_addr = config_addr.add(SIZE_OF_SINGLE_CONFIG)
            yield (ip, port)
        except InvalidConfig:
            # when parse_single_config throw InvalidConfig exceptoin,
            # it should be that it finished iteration of config
            break
        except Exception as e:
            print('[!] {}'.format(e))

def extract_c2(config_addr):    
    for (ip, port) in iterate_config(config_addr):
        print('http://{}:{}'.format(ip, port))

def main():
    extract_c2(toAddr(0x1001f000))

if __name__ == '__main__':
    main()